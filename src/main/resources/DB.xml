<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<!-- 开启事务控制的注解支持 -->  
    <tx:annotation-driven transaction-manager="transactionManager"/>

	<bean id="pageInterceptor" class="com.wzsuper.JerseyAPI.aop.PageInterceptor"/>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mapping/*.xml"></property>

		<property name="plugins" ref="pageInterceptor"/>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wzsuper.jersey.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>


	<!-- (事务管理)transaction manager-->
	<bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--<aop:config>
		<aop:pointcut  id="transactionPointcut"  expression="execution(* com.longrise.jersey.logic..*.*(..))"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" />
	</aop:config> 
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes> 
			<tx:method name="find*" propagation="REQUIRED" read-only="true" /> 
			<tx:method name="get*" propagation="REQUIRED" read-only="true" /> 
			<tx:method name="select*" propagation="REQUIRED" read-only="true" /> 
			<tx:method name="*" propagation="REQUIRED"/> 
		</tx:attributes> 
	</tx:advice>-->

	<!-- 阿里druid数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="name" value="lupdp" />
		
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		
		<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		
		<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		 <!-- ******重要的配置：监控统计拦截的filters,日志记录 *start* ******-->
		 <!-- 并在filters属性中配置了log4j，ref中的bean是下面拦截器的配置 -->
		 <!-- proxyFilters和filters是组合关系,前者是根据bean配置,后者根据别名配置的-->
		 <!-- stat是statfilter的别名,log4j是logFilter的别名-->
		 <!-- 监控统计拦截的filters,日志记录,这里开启了stat,wall（sql翻过墙过滤监控）,log4j（log4j的监控）配置 -->
		<property name="proxyFilters">
			<list>
			 <ref bean="statfilter"/>
			 <ref bean="logFilter"/>
			</list>
		</property>
		<property name="filters" value="wall" />
	</bean>
	
	
	 <!-- 慢SQL记录 *stat* -->
	<bean id="statfilter" class="com.alibaba.druid.filter.stat.StatFilter">
		 <property name="mergeSql" value="true"/>
		 <property name="slowSqlMillis" value="1000"/>
		 <property name="logSlowSql" value="true"/>
	</bean>

	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		 <property name="resultSetLogEnabled" value="true"/>
		 <property name="statementExecutableSqlLogEnable" value="true"/>
	</bean>
	
</beans>